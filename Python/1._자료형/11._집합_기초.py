# 집합
# 집합은 중복을 허용하지 않는다.
# 집합에는 순서가 없다 그러므로 인덱싱과 같은 것을 할 수 없다.(그래서 만약 인덱싱을 하고 싶다면 리스트나 튜플로 변환시켜야 한다.)

# 집합의 선언
a = set([1, 2, 3]) # set을 이용하여 집합 선언하기
print(a)
a = set("hellow") # 집합은 중복을 허용하지 않기 때문에 중복되는 값 "l"은 하나만 남아 최종적으로 {'e', 'o', 'h', 'w', 'l'}만 남는다
print(a)


# 교집합
a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 5])
d = a & b & c # a, b, c의 교집합을 추려준다.
print(d)

# or

a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 5])
d = a.intersection(b, c)
print(d)

"=============================================================================================================================="

# 합집합

a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 11, 100])
d = a | b | c # a, b, c의 합집합을 추려준다.
print(d)

# or

a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 11, 100])
d = a.union(b, c)
print(d)

"=============================================================================================================================="

# 차집합

a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 11, 100])
d = a - b - c # a에서 b와 c의 요소를 제외한 차집합을 추려준다.
print(d)

# or

a = set([1, 2, 3, 4, 5, 6, 7])
b = set([4, 5, 6, 7, 8, 9, 10])
c = set([4, 11, 100])
d = a.difference(b, c)
print(d)

"=============================================================================================================================="

# 집합과 관련된 함수들

# 집합 요소를 추가해주는 함수 add
a = set([1, 2, 3, 4, 5, 6, 7])
a.add(100)
print(a)

# 여러가지 요소를 집합에 추가해주는 함수 update
a = set([1, 2, 3, 4, 5, 6, 7])
a.update([100, 200, 300])
print(a)

# 특정 자료를 집합에서 삭제해주는 함수 remove
a = set([1, 2, 3, 4, 5, 6, 7])
a.remove(1) # 이때 삭제할 수 있는 자료는 하나만이다.
print(a)