# 변수를 선언하는 것은 자료(객체)를 가르키는 것을 정하는 것이다.
a = [1, 2, 3]

# 이렇게 하면 [1, 2, 3]를 a라는 것으로 지정하기로 한 것이다. 이를 활용하면,
b = a
# 라는 것도 가능할 것이다.

# 그런데, 이것은 b와 a가 항상 같게 한 것이므로, a가 바뀔 때 b도 변하게 될 수 있다. 그래서 a의 값만을 저장하기 위해서는..

b = a[:] # a에 저장된 모든 리스트를 슬라이싱 하여 저장
# 이렇게 해볼 수 있을 것이다. 혹은

from copy import copy
b = copy(a) # 하여 저장 할 수도 있다.

# 여러 방식의 변수 선언
"""
다음과 같은 것도 가능하다
"""
a, b = [1, 2]
a, b = (1, 2)

# 지역변수와 번역변수
"""
전역변수는 함수 밖, 전역 공간에 정의된 함수이다
반면에 전역변수는 함수 안, 지역 공간에 정의된 함수이다
전역변수는 함수 안과 밖에서 모두 쓰일 수 있지만
지역변수는 함수 안에서만 사용되고, 밖에서는 사용될 수 없다

중요한 점은 사용된다는 것에 주목하자!
전역변수가 함수 안과 밖에서 사용될 수(값을 읽가) 있다고 하였지, 함수 안에서도 수정될 수 있다고 하지는 않았다.
전역변수를 함수 안(지역공간)애서 수정하려면, global 키워드를 사용해야한다
이때, 전역변수의 이름과 같은 변수를 함수 안에 정의하면, 함수 안에서만 쓰이는 지역변수가 생성된다(물론 함수 밖에 쓰이는 전역변수는 생존해 있다)
"""
a = "me"
def variable():
    a = "function"
    return a
variable()
print (a) # 이런 경우 a는 위에 me를 지칭하는 것이다.
"""
global 키워드는 전역변수를 지역공간에서 수정할 수 있게 해준다
"""
a = 1
def use_global():
    global a
    a += 1
    return a
use_global()
print(a) # 이런 경우 a에는 1이 더해진 2가 된다