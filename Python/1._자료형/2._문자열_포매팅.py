# 포매팅(formatting)은 문자열 안에서 특정 문자만을 바꾸거나 삽입하는 방법이다.


# 숫자의 포매팅
a = "I have %d apples" % 3 # 숫자의 포매팅은 %d를 이용한다.
print(a)

# 문자의 포매팅
a = "I have %s apples" % "three" # 문자의 포매팅은 %s를 이용한다.
print(a)

# 추가적으로 변수를 사용하여 포매팅 할 수도 있다.
number = 3
a = "I have %d apples" % number # 변수를 사용하여 포매팅 하였다.
print(a)

# 게다가 2개 이상의 값을 포매팅 할 수도 있다.
number_apple = 3
number_melon = 4
a = "I have %d apples. and I have %d melons" % (number_apple, number_melon) # 2개 이상의 같은 종류의 자료(숫자, 숫자)를 포매팅 하였다.
print(a)
# or
number_d = 3
number_s = "three"
a = "I have %d apples. and I can eat %s apples" % (number_d, number_s) # 2개 이상의 다른 종류의 자료(숫자, 문자)를 포매팅 하였다.
print(a)

# 문자열의 길이를 조절하는 포매팅
a = "hi"
b = "%10sjiwon" % a # %10은 10의 길이를 가진 공간을 가진다는 것을 말하는 것이고 그 뒤에 s는 위와 같이 대입되는 문자를 말한다.
print(b) # 결과적으로 10의 길이를 가진 공간안에 변수 a에 해당하는 것이 삽입되어 출력된다. 이때 hi는 길이가 2개 이므로 나머지 공간은 공백 상태로 출력되는데, 공백공간이 앞에 위치하고 가장 끝에 삽입된 문자가 위치하여 '        hi'+'jiwon' 이라는 값이 출력된다.

# 이때 공백 공간을 뒤로 배치할 수도 있다.
a = "hi"
b = "%-10sjiwon" % a # %-10이기 때문에 10의 길이를 가진 공간을 가지는 것을 말하는 것은 같지만, 공백이 있을 경우 공백을 뒤에서부터 배치한다는 점이 다르다.
print(b) # 결과적으로 10의 길이를 가진 공간안에 변수 a에 해당하는 것이 삽입되어 출력된다. 이때 hi는 길이가 2개 이므로 나머지 공간은 공백 상태로 출력되는데, 공백공간이 뒤에 위치하고 가장 앞에 삽입된 문자가 위치하여 'hi        '+'jiwon' 이라는 값이 출력된다.

# 소숫점을 표현하는 포매팅
a = 3.4242424242
b = "%10.4f" % a # %자료의 길이.표시하고 싶은 소숫점 자릿 수f 의 형태를 지닌 것이다.
print(b) # 결과적으로 10의 길이를 가진 공간안에 소숫점 네 번째 자리까지만 나타낸 것이 출력될 것이다. 이때 소숫점 네 번째 자리까지의 숫자를 가진 수 3.4242는 .을 포함하여 6개의 공간을 가지고 있으므로, 나머지는 공백공간으로 앞에 위치하고 3.4242는 뒤에 위치하여 '    3.4242'가 출력될 것이다.



# 이와같은 포매팅은 Python에 함수로 내장되어 있어 이를 함수로 더욱 간결하게 표현할 수 있다.
a = "I eat {}apples".format(3) # 포매팅 하고자 하는 곳은 {}으로 표현하고, .format(인자) 를 사용하여 format 함수를 사용한다.
print(a) # 결과적으로 {}에 format함수의 인자인 3이 삽입되어 "I eat 3 apples"가 출력된다.

# 위의 사례들과 똑같이 변수를 사용하거나,
# 2개 이상의 값을 포매팅할 수도 있다.
number = 3
fruit = "apple"
a = "I ate {}apples and I like {}!".format(number, fruit) # 변수를 정의해주고 format 함수를 사용하여 2개 이상의 값을 포매팅 하였다.
print(a)
# or
a = "I ate {number}apples and I like {fruit}!".format(number=3, fruit="apple") # 포메팅 할 곳에 이름을 정해주고 format 함수의 인자에 알맞게 대입하였다.
print(a)

# 또한 위의 사례들과 마찬가지로 문자열의 길이를 조절하는 포매팅을 할 수도 있다.
# {0:>10}을 이용한 오른쪽 정렬
a = "{0:>10}jiwon".format("hi") # "%10sjiwon" % "hi" 와 같은 것이다. 10의 길이를 가진 문자열에 hi가 들어갈 것인데, 남은 공간은 공백으로 표현되어 앞에 배치되고 문자는 뒤에 표현되어 "        hi"+"jiwon"이 될것이다.
print(a)
# {0:<10}을 이용한 왼쪽 정렬
a = "{0:<10}jiwon".format("hi") # "%-10sjiwon" % "hi" 와 같은 것이다. 10의 길이를 가진 문자열에 hi가 들어갈 것인데, 남은 공간은 공백으로 표현되어 뒤에 배치되고 문자는 앞에 표현되어 "hi        "+"jiwon"이 될것이다.
print(a)
# {0:^10}을 이용한 가운데 정렬
a = "{0:^10}jiwon".format("hi") # 이렇게 할 경우 문자가 중앙을 기준으로 배치되고 남은 공간을 앞 뒤로 공백이 채워넣는다.
print(a)

# 이때 공백을 채우게도 설정 할수도 있다.
# {0:채우고싶은 문자^10}를 이용하여 공백 채우기
a = "{0:=^10}jiwon".format("hi") # {0:채우고싶은 문자 삽입^문자의길이} 하면 공백이 채우고자 하는 문자로 채워져 출력된다.
print(a) # 결과적으로 8개의 공백공간은 =로 채워져 "====hi===="+"jiwon"으로 출력될 것이다. 